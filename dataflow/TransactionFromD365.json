{
	"name": "TransactionFromD365",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "nsridynamicssandox",
						"type": "LinkedServiceReference"
					},
					"name": "donororder"
				},
				{
					"linkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					},
					"name": "bankdetails"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "nsridynamicssandox",
						"type": "LinkedServiceReference"
					},
					"name": "SandboxUpdate",
					"rejectedDataLinkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "joindonororderbankdetails"
				},
				{
					"name": "accountcontact"
				},
				{
					"name": "CleanupBankDetailColumns"
				},
				{
					"name": "CleanupdonorOrder"
				},
				{
					"name": "derivedColumnTrxDateAmount"
				},
				{
					"name": "contactkey"
				},
				{
					"name": "UniqueTransaction"
				},
				{
					"name": "FilterDonorOrders"
				},
				{
					"name": "Assert1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cog_donorleadname as string,",
				"          cof_datecancelled as timestamp,",
				"          cog_donationreason as integer,",
				"          cog_paymentmethodname as string,",
				"          cog_ticketamount_base as decimal(38,0),",
				"          cog_npodocumentafrikaanstext as string,",
				"          cog_donotcreatenpodocumentname as string,",
				"          cog_paidamount as decimal(38,0),",
				"          cog_sendpaymentdetails as boolean,",
				"          cog_assignticketnumbers as boolean,",
				"          cog_noofdonortickets_state as integer,",
				"          cog_shutoffdate as timestamp,",
				"          cog_donationamount_base as decimal(38,0),",
				"          cog_sendpaymentdetailsdate as timestamp,",
				"          cog_npodoc_sendmethodname as string,",
				"          cog_paymenttype as integer,",
				"          cog_paidamount_base as decimal(38,0),",
				"          cog_delivery_receipt as boolean,",
				"          createdbyname as string,",
				"          cog_administered as boolean,",
				"          cog_sendwelcomepackname as string,",
				"          modifiedbyname as string,",
				"          cog_npodoc_tax_trans as boolean,",
				"          createdonbehalfbyyominame as string,",
				"          cog_sendtickets as boolean,",
				"          statuscodename as string,",
				"          cog_datasource as integer,",
				"          statuscode as integer,",
				"          cog_npodoc_receiptname as string,",
				"          cog_sendticketsname as string,",
				"          createdonbehalfbyname as string,",
				"          cog_administrationcontactname as string,",
				"          cog_contactname as string,",
				"          cog_donationreasonname as string,",
				"          cog_nameonvessel as string,",
				"          cog_name as string,",
				"          cog_npodoc_sendmethod as integer,",
				"          cog_noofdonortickets_date as timestamp,",
				"          cog_leadtypename as string,",
				"          cog_npodocumentenglishtext as string,",
				"          cog_cancellreasonname as string,",
				"          exchangerate as decimal(38,10),",
				"          cog_contactyominame as string,",
				"          cog_administrationaccountname as string,",
				"          cog_followupdate as timestamp,",
				"          versionnumber as long,",
				"          cog_paymentmade as boolean,",
				"          cog_administrationaccountyominame as string,",
				"          cog_totalticketamount_state as integer,",
				"          cog_communicationlanguagename as string,",
				"          cog_paymenttypename as string,",
				"          cog_createticketrows as boolean,",
				"          cog_stationname as string,",
				"          cog_delivery_tax_transname as string,",
				"          cog_paymentmethod as integer,",
				"          cog_sendpaymentdetailsname as string,",
				"          modifiedonbehalfbyname as string,",
				"          cog_delivery_equity as boolean,",
				"          cog_sourcename as string,",
				"          importsequencenumber as integer,",
				"          createdon as timestamp,",
				"          cog_resendname as string,",
				"          overriddencreatedon as timestamp,",
				"          cog_npodoc_equityname as string,",
				"          cog_bankreference as string,",
				"          utcconversiontimezonecode as integer,",
				"          cog_upsellname as string,",
				"          cog_donororderid as string,",
				"          cog_competition as integer,",
				"          cog_totalticketamount_date as timestamp,",
				"          cog_balanceamount as decimal(38,2),",
				"          cog_balanceamount_base as decimal(38,2),",
				"          cog_transactionname as string,",
				"          cog_donationamount as decimal(38,0),",
				"          cog_completedonororder as boolean,",
				"          cog_npoadministrationafrikaanstext as string,",
				"          cog_npodoc_tax_annuallyname as string,",
				"          cog_source as integer,",
				"          cog_numberoftickets as integer,",
				"          cog_administrationcontactyominame as string,",
				"          cog_accessdb_lnglogno as string,",
				"          cog_ticketamount as decimal(38,0),",
				"          cog_donationtypename as string,",
				"          statecode as integer,",
				"          cog_datasourcename as string,",
				"          owneridyominame as string,",
				"          cog_donationtype as integer,",
				"          statecodename as string,",
				"          cog_donororderfrom as integer,",
				"          cog_accountyominame as string,",
				"          cog_delivery_receiptname as string,",
				"          createdbyyominame as string,",
				"          transactioncurrencyidname as string,",
				"          cog_npodoc_tax_transname as string,",
				"          modifiedon as timestamp,",
				"          cog_cancellreason as integer,",
				"          cog_donotcreatenpodocument as boolean,",
				"          cog_dateconverted as timestamp,",
				"          cog_paymentmadename as string,",
				"          cog_npodoc_tax_annually as boolean,",
				"          cog_delivery_tax_trans as boolean,",
				"          cog_sendwelcomepack as boolean,",
				"          cog_delivery_equityname as string,",
				"          cog_bankdetailsname as string,",
				"          cog_leadtype as integer,",
				"          modifiedbyyominame as string,",
				"          cog_searescuecampaignname as string,",
				"          modifiedonbehalfbyyominame as string,",
				"          cog_datebanked as timestamp,",
				"          cog_npodoc_equity as boolean,",
				"          cog_resend as boolean,",
				"          cog_totalticketamount_base as decimal(38,0),",
				"          cog_completedonorordername as string,",
				"          cog_createticketrowsname as string,",
				"          cog_donororderfromname as string,",
				"          cog_npodoc_receipt as boolean,",
				"          cog_npoadministrationenglishtext as string,",
				"          owneridname as string,",
				"          cog_datepaid as timestamp,",
				"          cog_administeredname as string,",
				"          cog_communicationlanguage as integer,",
				"          owningbusinessunitname as string,",
				"          cog_noofdonortickets as integer,",
				"          cog_searescuecampaign as integer,",
				"          cog_accountname as string,",
				"          cog_dateassigned as timestamp,",
				"          cog_accessdb_strcompanyname as string,",
				"          owneridtype as string,",
				"          cog_totalticketamount as decimal(38,0),",
				"          cog_competitionname as string,",
				"          cog_sendwelcomepackdate as timestamp,",
				"          cog_assignticketnumbersname as string,",
				"          cog_upsell as boolean,",
				"          timezoneruleversionnumber as integer,",
				"          cog_description as string,",
				"          cog_campaignname as string,",
				"          cog_donorlead as string,",
				"          cog_station as string,",
				"          createdonbehalfby as string,",
				"          cog_administrationcontact as string,",
				"          owninguser as string,",
				"          cog_bankdetails as string,",
				"          cog_contact as string,",
				"          modifiedby as string,",
				"          transactioncurrencyid as string,",
				"          cog_administrationaccount as string,",
				"          modifiedonbehalfby as string,",
				"          cog_transaction as string,",
				"          ownerid as string,",
				"          cog_campaign as string,",
				"          {@odata.etag} as string,",
				"          createdby as string,",
				"          owningbusinessunit as string,",
				"          cog_account as string,",
				"          owningteam as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     store: 'dynamics',",
				"     format: 'dynamicsformat',",
				"     entity: 'cog_donororder',",
				"     timeout: 30,",
				"     manifestType: 'model') ~> donororder",
				"source(output(",
				"          cog_bankdetailsid as string,",
				"          statecode as long,",
				"          statecodename as string,",
				"          cog_accountnumber as string,",
				"          cog_accountid as string,",
				"          cog_accounttype as long,",
				"          cog_accounttypename as string,",
				"          cog_bank as string,",
				"          cog_branchcode as string,",
				"          cog_contactid as string,",
				"          cog_cvc as string,",
				"          cog_expireydate as timestamp,",
				"          cog_accountidname as string,",
				"          cog_bankname as string,",
				"          cog_contactidname as string,",
				"          cog_creditcardtype as long,",
				"          cog_creditcardtypename as string,",
				"          cog_accountholder as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     entity: 'cog_bankdetails',",
				"     format: 'cdm',",
				"     manifestType: 'model',",
				"     folderPath: 'environments/nsridev/HOF Donor Orders',",
				"     fileSystem: 'power-platform-dataflows') ~> bankdetails",
				"CleanupdonorOrder, CleanupBankDetailColumns join(cog_bankdetails == cog_bankdetailsid,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joindonororderbankdetails",
				"derivedColumnTrxDateAmount split((statuscode==181310001||statuscode==2)&&cog_donororderfrom==181310000&&(cog_paymentmethod==181310003||cog_paymentmethod==181310001)&&cog_donationtype==181310001,",
				"     (statuscode==181310001||statuscode==2)&&cog_donororderfrom==181310001&&(cog_paymentmethod==181310003||cog_paymentmethod==181310001)&&cog_donationtype==181310001,",
				"     disjoint: false) ~> accountcontact@(contactconvertedpaidmonthly, accountconvertedpaidmonthly)",
				"bankdetails select(mapColumn(",
				"          cog_bankdetailsid,",
				"          cog_accountnumber,",
				"          cog_accounttype,",
				"          cog_bank,",
				"          cog_branchcode,",
				"          cog_cvc,",
				"          cog_expireydate,",
				"          cog_creditcardtype,",
				"          cog_accountholder",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CleanupBankDetailColumns",
				"FilterDonorOrders select(mapColumn(",
				"          cog_donororderid,",
				"          statecode,",
				"          statuscode,",
				"          cog_donationtype,",
				"          cog_donororderfrom,",
				"          cog_competition,",
				"          cog_ticketamount,",
				"          cog_donationamount,",
				"          cog_account,",
				"          cog_contact,",
				"          cog_bankdetails,",
				"          cog_paymenttype,",
				"          cog_paymentmethod,",
				"          cog_contactname,",
				"          cog_accountname,",
				"          cog_bankdetailsname",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CleanupdonorOrder",
				"joindonororderbankdetails derive(cog_transactiondate = currentUTC(),",
				"          cog_transactionamount = iif(isNull(cog_ticketamount),cog_donationamount,cog_ticketamount)) ~> derivedColumnTrxDateAmount",
				"accountcontact@contactconvertedpaidmonthly derive(contactkey = cog_contact+toString(cog_paymentmethod)+cog_bankdetailsid) ~> contactkey",
				"contactkey aggregate(groupBy(cog_contact,",
				"          cog_donororderfrom,",
				"          cog_paymentmethod,",
				"          cog_bankdetails,",
				"          cog_competition,",
				"          contactkey),",
				"     cog_transactionamount = sum(cog_transactionamount)) ~> UniqueTransaction",
				"donororder filter(statecode==0&&(statuscode==181310001||statuscode==2)) ~> FilterDonorOrders",
				"UniqueTransaction assert(expectTrue(ERROR_FUNCTION(''), false, 'assert1')) ~> Assert1",
				"Assert1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'dynamics',",
				"     format: 'dynamicsformat',",
				"     entity: 'cog_donororder',",
				"     timeout: 30,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: 'error-output-adf',",
				"     ignoreAssertFailedRows: true,",
				"     mapColumn(",
				"          cog_contact,",
				"          cog_paymentmethod,",
				"          cog_transactionamount,",
				"          cog_division = cog_competition,",
				"          cog_donororderfrom",
				"     )) ~> SandboxUpdate"
			]
		}
	}
}