{
	"name": "donororder",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					},
					"name": "donororder"
				},
				{
					"linkedService": {
						"referenceName": "nsridynamicssandox",
						"type": "LinkedServiceReference"
					},
					"name": "bankdetails"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "bankdetailcolumns"
				},
				{
					"name": "joindonororderbankdetails"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cog_donororderid as string,",
				"          statecode as long,",
				"          statecodename as string,",
				"          statuscode as long,",
				"          statuscodename as string,",
				"          cog_donationtype as long,",
				"          cog_donationtypename as string,",
				"          cog_donororderfrom as long,",
				"          cog_donororderfromname as string,",
				"          cog_competition as long,",
				"          cog_competitionname as string,",
				"          cog_ticketamount as double,",
				"          cog_donationamount as double,",
				"          cog_account as string,",
				"          cog_accountname as string,",
				"          cog_contact as string,",
				"          cog_contactname as string,",
				"          cog_bankdetails as string,",
				"          cog_bankdetailsname as string,",
				"          cog_paymenttype as long,",
				"          cog_paymenttypename as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     entity: 'cog_donororder',",
				"     format: 'cdm',",
				"     manifestType: 'model',",
				"     folderPath: 'environments/nsridev/HOF Donor Orders',",
				"     fileSystem: 'power-platform-dataflows') ~> donororder",
				"source(output(",
				"          cog_bankname as string,",
				"          cog_expireydate as timestamp,",
				"          createdonbehalfbyyominame as string,",
				"          organizationidname as string,",
				"          statuscode as integer,",
				"          cog_contactidyominame as string,",
				"          cog_accountidyominame as string,",
				"          statuscodename as string,",
				"          modifiedbyyominame as string,",
				"          cog_creditcardtype as integer,",
				"          cog_contactidname as string,",
				"          overriddencreatedon as timestamp,",
				"          modifiedon as timestamp,",
				"          cog_accounttypename as string,",
				"          timezoneruleversionnumber as integer,",
				"          versionnumber as long,",
				"          modifiedonbehalfbyyominame as string,",
				"          cog_cvc as string,",
				"          createdbyname as string,",
				"          statecode as integer,",
				"          cog_accounttype as integer,",
				"          importsequencenumber as integer,",
				"          createdon as timestamp,",
				"          cog_bankdetailsid as string,",
				"          utcconversiontimezonecode as integer,",
				"          statecodename as string,",
				"          cog_accountnumber as string,",
				"          createdonbehalfbyname as string,",
				"          modifiedbyname as string,",
				"          modifiedonbehalfbyname as string,",
				"          createdbyyominame as string,",
				"          cog_accountholder as string,",
				"          cog_branchcode as string,",
				"          cog_creditcardtypename as string,",
				"          cog_accountidname as string,",
				"          cog_accountid as string,",
				"          cog_bank as string,",
				"          createdonbehalfby as string,",
				"          cog_contactid as string,",
				"          modifiedby as string,",
				"          modifiedonbehalfby as string,",
				"          {@odata.etag} as string,",
				"          createdby as string,",
				"          organizationid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'dynamics',",
				"     format: 'dynamicsformat',",
				"     entity: 'cog_bankdetails',",
				"     timeout: 30) ~> bankdetails",
				"bankdetails select(mapColumn(",
				"          cog_bankname,",
				"          cog_expireydate,",
				"          createdonbehalfbyyominame,",
				"          organizationidname,",
				"          statuscode,",
				"          cog_contactidyominame,",
				"          cog_accountidyominame,",
				"          statuscodename,",
				"          modifiedbyyominame,",
				"          cog_creditcardtype,",
				"          cog_contactidname,",
				"          overriddencreatedon,",
				"          modifiedon,",
				"          cog_accounttypename,",
				"          timezoneruleversionnumber,",
				"          versionnumber,",
				"          modifiedonbehalfbyyominame,",
				"          cog_cvc,",
				"          createdbyname,",
				"          statecode,",
				"          cog_accounttype,",
				"          importsequencenumber,",
				"          createdon,",
				"          cog_bankdetailsid,",
				"          utcconversiontimezonecode,",
				"          statecodename,",
				"          cog_accountnumber,",
				"          createdonbehalfbyname,",
				"          modifiedbyname,",
				"          modifiedonbehalfbyname,",
				"          createdbyyominame,",
				"          cog_accountholder,",
				"          cog_branchcode,",
				"          cog_creditcardtypename,",
				"          cog_accountidname,",
				"          cog_accountid,",
				"          cog_bank,",
				"          createdonbehalfby,",
				"          cog_contactid,",
				"          modifiedby,",
				"          modifiedonbehalfby,",
				"          {@odata.etag},",
				"          createdby,",
				"          organizationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> bankdetailcolumns",
				"donororder, bankdetailcolumns join(cog_bankdetails == cog_bankdetailsid,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joindonororderbankdetails"
			]
		}
	}
}