{
	"name": "donororder",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					},
					"name": "donororder"
				},
				{
					"linkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					},
					"name": "bankdetails"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					},
					"schemaLinkedService": {
						"referenceName": "sandboxdatalake",
						"type": "LinkedServiceReference"
					},
					"name": "sandboxcontacttransaction"
				}
			],
			"transformations": [
				{
					"name": "joindonororderbankdetails"
				},
				{
					"name": "accountcontact"
				},
				{
					"name": "contacttransaction"
				},
				{
					"name": "CleanupBankDetailColumns"
				},
				{
					"name": "CleanupdonorOrder"
				},
				{
					"name": "derivedColumnTrxDateAmount"
				},
				{
					"name": "contactkey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cog_donororderid as string,",
				"          statecode as long,",
				"          statecodename as string,",
				"          statuscode as long,",
				"          statuscodename as string,",
				"          cog_donationtype as long,",
				"          cog_donationtypename as string,",
				"          cog_donororderfrom as long,",
				"          cog_donororderfromname as string,",
				"          cog_competition as long,",
				"          cog_competitionname as string,",
				"          cog_ticketamount as double,",
				"          cog_donationamount as double,",
				"          cog_account as string,",
				"          cog_accountname as string,",
				"          cog_contact as string,",
				"          cog_contactname as string,",
				"          cog_bankdetails as string,",
				"          cog_bankdetailsname as string,",
				"          cog_paymenttype as long,",
				"          cog_paymenttypename as string,",
				"          cog_paymentmethod as long,",
				"          cog_paymentmethodname as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     entity: 'cog_donororder',",
				"     format: 'cdm',",
				"     manifestType: 'model',",
				"     folderPath: 'environments/nsridev/HOF Donor Orders',",
				"     fileSystem: 'power-platform-dataflows') ~> donororder",
				"source(output(",
				"          cog_bankdetailsid as string,",
				"          statecode as long,",
				"          statecodename as string,",
				"          cog_accountnumber as string,",
				"          cog_accountid as string,",
				"          cog_accounttype as long,",
				"          cog_accounttypename as string,",
				"          cog_bank as string,",
				"          cog_branchcode as string,",
				"          cog_contactid as string,",
				"          cog_cvc as string,",
				"          cog_expireydate as timestamp,",
				"          cog_accountidname as string,",
				"          cog_bankname as string,",
				"          cog_contactidname as string,",
				"          cog_creditcardtype as long,",
				"          cog_creditcardtypename as string,",
				"          cog_accountholder as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     entity: 'cog_bankdetails',",
				"     format: 'cdm',",
				"     manifestType: 'model',",
				"     folderPath: 'environments/nsridev/HOF Donor Orders',",
				"     fileSystem: 'power-platform-dataflows') ~> bankdetails",
				"CleanupdonorOrder, CleanupBankDetailColumns join(cog_bankdetails == cog_bankdetailsid,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joindonororderbankdetails",
				"derivedColumnTrxDateAmount split((statuscode==181310001||statuscode==2)&&cog_donororderfrom==181310000&&(cog_paymentmethod==181310003||cog_paymentmethod==181310001)&&cog_donationtype==181310001,",
				"     (statuscode==181310001||statuscode==2)&&cog_donororderfrom==181310001&&(cog_paymentmethod==181310003||cog_paymentmethod==181310001)&&cog_donationtype==181310001,",
				"     disjoint: false) ~> accountcontact@(contactconvertedpaidmonthly, accountconvertedpaidmonthly)",
				"contactkey aggregate(groupBy(contactkey),",
				"     cog_transactionamount = sum(cog_transactionamount)) ~> contacttransaction",
				"bankdetails select(mapColumn(",
				"          cog_bankdetailsid,",
				"          cog_accountnumber,",
				"          cog_accounttype,",
				"          cog_bank,",
				"          cog_branchcode,",
				"          cog_cvc,",
				"          cog_expireydate,",
				"          cog_creditcardtype,",
				"          cog_accountholder",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CleanupBankDetailColumns",
				"donororder select(mapColumn(",
				"          cog_donororderid,",
				"          statecode,",
				"          statuscode,",
				"          cog_donationtype,",
				"          cog_donororderfrom,",
				"          cog_competition,",
				"          cog_ticketamount,",
				"          cog_donationamount,",
				"          cog_account,",
				"          cog_contact,",
				"          cog_bankdetails,",
				"          cog_paymenttype,",
				"          cog_paymentmethod",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> CleanupdonorOrder",
				"joindonororderbankdetails derive(cog_transactiondate = currentUTC(),",
				"          cog_transactionamount = iif(isNull(cog_ticketamount),cog_donationamount,cog_ticketamount)) ~> derivedColumnTrxDateAmount",
				"accountcontact@contactconvertedpaidmonthly derive(contactkey = cog_contact+toString(cog_paymentmethod)+cog_bankdetailsid) ~> contactkey",
				"contacttransaction sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     entity: '',",
				"     format: 'cdm',",
				"     manifestType: 'manifest',",
				"     folderPath: 'environments/nsridev/HOF Donor Orders',",
				"     fileSystem: 'power-platform-dataflows',",
				"     columnNamesAsHeader: true,",
				"     columnDelimiter: ',',",
				"     quoteChar: '\\\"',",
				"     escapeChar: '\\\\',",
				"     corpusPath: '',",
				"     corpusStore: 'adlsgen2',",
				"     adlsgen2_fileSystem: 'power-platform-dataflows',",
				"     truncate: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sandboxcontacttransaction"
			]
		}
	}
}